{"name": "test_add_to_cart_items", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <Tests.test_homepage.TestHomepage object at 0x1022361d0>\ndriver = <selenium.webdriver.safari.webdriver.WebDriver (session=\"E8094820-2F99-445D-ACAC-13C96E0FA607\")>\n\n    def test_add_to_cart_items(self, driver):\n        homepage = Homepage(driver)\n        homepage.add_to_cart_1()\n        homepage.add_tocart_2()\n        homepage.click_on_cart()\n        time.sleep(5)\n        homepage.get_cart_items()\n        expected_count = 2\n        try:\n            actual_count = homepage.get_cart_items()\n            assert actual_count == expected_count\n        except Exception as e:\n            print(f\"there is an error in the count of items in the cart, PO please check\", {e})\n    \n        homepage.click_on_check_out()\n>       homepage.add_add_details(\"Chethan\", \"gopal\", \"562106\")\n\ntest_homepage.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../Pages/homePage.py:37: in add_add_details\n    self.send_keys(self.FIRST_NAME, fname)\n../Pages/basePage.py:27: in send_keys\n    element = WebDriverWait(self.driver, 10).until(ec.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"E8094820-2F99-445D-ACAC-13C96E0FA607\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x102af1c60>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../.venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "attachments": [{"name": "log", "source": "100f8138-c047-4daa-92ab-f645363d246b-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "1d0e4a3f-3091-4bfe-9222-58a17e0eba99-attachment.txt", "type": "text/plain"}], "start": 1717189543805, "stop": 1717189559177, "uuid": "34b3ddde-0e5b-4d97-820e-243125c677b6", "historyId": "8810bb5726cbc5addc32aeb789336459", "testCaseId": "8810bb5726cbc5addc32aeb789336459", "fullName": "Tests.test_homepage.TestHomepage#test_add_to_cart_items", "labels": [{"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_homepage"}, {"name": "subSuite", "value": "TestHomepage"}, {"name": "host", "value": "Chethans-MacBook-Pro.local"}, {"name": "thread", "value": "20701-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_homepage"}]}